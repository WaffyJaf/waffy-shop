import { useState, useEffect, useRef } from 'react';
import { AddProducts, uploadImage } from '../api/productapi.ts';
import { FormProduct } from '../type/product.ts';
import Swal from 'sweetalert2';
import { useForm, SubmitHandler } from 'react-hook-form';
import { getAllCategories, Category } from '../api/categoryapi.ts';
import Navbar from '../component/Navbar.tsx';

const AddProductPage: React.FC = () => {
  const { 
    register, 
    handleSubmit, 
    formState: { errors, isSubmitting }, 
    reset,
  } = useForm<FormProduct>({
    defaultValues: {
      name: '',
      description: '',
      price: 0,
      stock: 0,
      image_url: '',
      category_id: 0
    }
  });

  const [categories, setCategories] = useState<Category[]>([]);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const fileToUpload = useRef<File | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    const loadCategories = async () => {
      try {
        console.log('Loading categories...');
        const data = await getAllCategories();
        console.log('Categories loaded:', data);
        setCategories(data);
      } catch (error) {
        console.error('Error loading categories:', error);
        setCategories([]);
      }
    };
    loadCategories();
  }, []);

  useEffect(() => {
    return () => {
      if (imagePreview) {
        URL.revokeObjectURL(imagePreview);
      }
    };
  }, [imagePreview]);

  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (!file.type.startsWith('image/')) {
        Swal.fire({
          icon: 'error',
          title: '‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
          text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
          confirmButtonColor: '#9333ea',
        });
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        Swal.fire({
          icon: 'error',
          title: '‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
          text: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB',
          confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
          confirmButtonColor: '#9333ea',
        });
        return;
      }
      const objectUrl = URL.createObjectURL(file);
      setImagePreview(objectUrl);
      fileToUpload.current = file;
    }
  };

  const handleUploadButtonClick = () => {
    fileInputRef.current?.click();
  };

  const onSubmit: SubmitHandler<FormProduct> = async (data) => {
  console.log('onSubmit started with data:', data);

  if (!fileToUpload.current && !data.image_url) {
    await Swal.fire({
      icon: 'error',
      title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û',
      text: '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
      confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
      confirmButtonColor: '#9333ea',
    });
    return;
  }

  try {
    Swal.fire({
      title: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...',
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    let imageUrl = data.image_url;

    if (fileToUpload.current) {
      const uploadedUrl = await uploadImage(fileToUpload.current);
      if (!uploadedUrl) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }
      imageUrl = uploadedUrl;
      data.image_url = imageUrl;
    }

    const result = await AddProducts(data);

    Swal.close(); // ‡∏õ‡∏¥‡∏î Swal loading ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á success

    if (result.success) {
      await Swal.fire({
        icon: 'success',
        title: '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        text: result.message || '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! üéâ',
        confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
        confirmButtonColor: '#9333ea',
      });

      reset({
        name: '',
        description: '',
        price: 0,
        stock: 0,
        image_url: '',
        category_id: 0,
      });
      setImagePreview(null);
      fileToUpload.current = null;
      if (fileInputRef.current) fileInputRef.current.value = '';
    } else {
      throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
    }
  } catch (error) {
    Swal.close();
    let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà';
    if (error instanceof Error) {
      errorMessage = error.message;
    }
    await Swal.fire({
      icon: 'error',
      title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      text: errorMessage + ' ‚ùå',
      confirmButtonText: '‡∏ï‡∏Å‡∏•‡∏á',
      confirmButtonColor: '#9333ea',
    });
  }
};


  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900  to-sky-900">
      <Navbar />
      <div className="max-w-5xl mx-auto mt-12 p-8 bg-white rounded-2xl shadow-xl">
        <span className="text-4xl font-bold  text-center text-gray-900 tracking-tight">
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
          <i className="fa-solid fa-plus ml-3 text-amber-400"></i>
        </span>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-8 mt-6">
          {/* Section: Basic Info */}
          <div className="bg-gray-100 p-6 rounded-xl shadow-sm">
            <span className="text-xl font-semibold mb-4 text-gray-800">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</span>
            <div className="grid grid-cols-1 gap-6">
              {/* Product Name */}
              <div>
                <label htmlFor="name" className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ <span className="text-red-500">*</span>
                </label>
                <input
                  id="name"
                  {...register('name', { required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' })}
                  className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow ${
                    errors.name ? 'border-red-500 shadow-sm' : 'hover:shadow-md'
                  }`}
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                  aria-describedby={errors.name ? 'name-error' : undefined}
                />
                {errors.name && (
                  <p id="name-error" className="mt-1 text-red-500 text-sm">
                    {errors.name.message}
                  </p>
                )}
              </div>

              {/* Product Description */}
              <div>
                <label htmlFor="description" className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                </label>
                <textarea
                  id="description"
                  {...register('description')}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow hover:shadow-md"
                  placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"
                  rows={5}
                />
              </div>
            </div>
          </div>

          {/* Section: Pricing and Stock */}
          <div className="bg-gray-100 p-6 rounded-xl shadow-sm">
            <span className="text-xl font-semibold mb-4 text-gray-800">‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å</span>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Product Price */}
              <div>
                <label htmlFor="price" className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏ö‡∏≤‡∏ó) <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  id="price"
                  {...register('price', {
                    required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                    min: { value: 0.01, message: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0' },
                  })}
                  className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow ${
                    errors.price ? 'border-red-500 shadow-sm' : 'hover:shadow-md'
                  }`}
                  placeholder="0.00"
                  step="0.01"
                />
                {errors.price && (
                  <p className="mt-1 text-red-500 text-sm">{errors.price.message}</p>
                )}
              </div>

              {/* Product Stock */}
              <div>
                <label htmlFor="stock" className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á <span className="text-red-500">*</span>
                </label>
                <input
                  type="number"
                  id="stock"
                  {...register('stock', {
                    required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                    min: { value: 0, message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0' },
                  })}
                  className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow ${
                    errors.stock ? 'border-red-500 shadow-sm' : 'hover:shadow-md'
                  }`}
                  placeholder="0"
                />
                {errors.stock && (
                  <p className="mt-1 text-red-500 text-sm">{errors.stock.message}</p>
                )}
              </div>
            </div>
          </div>

          {/* Section: Category and Image */}
          <div className="bg-gray-50 p-6 rounded-xl shadow-sm">
            <span className="text-xl font-semibold mb-4 text-gray-800">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</span>
            <div className="grid grid-cols-1 gap-6">
              {/* Category */}
              <div>
                <label htmlFor="category_id" className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà <span className="text-red-500">*</span>
                </label>
                <select
                  id="category_id"
                  {...register('category_id', {
                    required: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà',
                    validate: (value) => Number(value) > 0 || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà',
                  })}
                  className={`w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-shadow ${
                    errors.category_id ? 'border-red-500 shadow-sm' : 'hover:shadow-md'
                  }`}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
                  {Array.isArray(categories) && categories.length > 0 ? (
                    categories.map((category) => (
                      <option key={category.id_categories} value={category.id_categories}>
                        {category.name}
                      </option>
                    ))
                  ) : (
                    <option value="" disabled>
                      ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                    </option>
                  )}
                </select>
                {errors.category_id && (
                  <p className="mt-1 text-red-500 text-sm">{errors.category_id.message}</p>
                )}
              </div>

              {/* Image Upload */}
              <div>
                <label htmlFor="image" className="block mb-2 text-sm font-medium text-gray-700">
                  ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ <span className="text-red-500">*</span>
                </label>
                <div className="flex items-center gap-4">
                  <button
                    type="button"
                    onClick={handleUploadButtonClick}
                    className="px-5 py-2.5 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors"
                  >
                    ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                  </button>
                  <input
                    type="file"
                    id="image"
                    accept="image/*"
                    ref={fileInputRef}
                    onChange={handleFileUpload}
                    className="hidden"
                  />
                  <input type="hidden" {...register('image_url')} />
                </div>
                {imagePreview && (
                  <div className="mt-4 p-4 bg-white rounded-lg shadow-sm border border-gray-200">
                    <p className="mb-2 text-sm font-medium text-gray-600">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:</p>
                    <img
                      src={imagePreview}
                      alt="Product preview"
                      className="h-48 w-full object-contain rounded-md"
                    />
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Submit Button */}
          <div className="flex justify-center">
            <button
              type="submit"
              disabled={isSubmitting}
              className={`px-8 py-3 rounded-lg text-white font-medium transition-all duration-200 ${
                isSubmitting
                  ? 'bg-gray-400 cursor-not-allowed'
                  : 'bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 shadow-md hover:shadow-lg'
              }`}
            >
              {isSubmitting ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AddProductPage;